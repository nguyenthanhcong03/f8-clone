import {
  createApi,
  fetchBaseQuery,
  type BaseQueryFn,
  type FetchArgs,
  type FetchBaseQueryError
} from '@reduxjs/toolkit/query/react'
import { logout, setToken } from '../features/auth/authSlice'
import type { RootState } from '../store'

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000'

export interface ApiError {
  status: number
  message: string
  errors?: Record<string, string[]> // d√πng cho l·ªói field validation
}

// Base query v·ªõi token t·ª´ localStorage
const baseQuery = fetchBaseQuery({
  baseUrl: API_URL,
  prepareHeaders: (headers, { getState }) => {
    const token = (getState() as RootState).auth.accessToken || localStorage.getItem('accessToken')
    if (token) headers.set('authorization', `Bearer ${token}`)
    return headers
  },
  credentials: 'include' // ƒê·ªÉ g·ª≠i cookie refresh token
})

// Custom baseQuery c√≥ retry refresh token
const baseQueryWithReauth: BaseQueryFn<string | FetchArgs, unknown, ApiError> = async (args, api, extraOptions) => {
  // G·ªçi query g·ªëc
  let result = await baseQuery(args, api, extraOptions)
  // N·∫øu l·ªói 401 - th·ª≠ refresh token
  if (result.error && 'status' in result.error && result.error.status === 401) {
    console.warn('üîÑ Access token h·∫øt h·∫°n, ƒëang refresh...')
    // G·ªçi API refresh token
    const refreshResult = await baseQuery(
      {
        url: '/auth/refresh',
        method: 'POST'
      },
      api,
      extraOptions
    )
    if (refreshResult.data) {
      const { accessToken } = refreshResult.data as { accessToken: string }
      // C·∫≠p nh·∫≠t token v√†o localStorage v√† Redux
      localStorage.setItem('accessToken', accessToken)
      api.dispatch(setToken(accessToken))

      // Retry request ban ƒë·∫ßu v·ªõi token m·ªõi
      result = await baseQuery(args, api, extraOptions)
    } else {
      console.error('‚ùå Refresh token th·∫•t b·∫°i, ƒëang logout...')
      // X√≥a token kh·ªèi localStorage
      localStorage.removeItem('accessToken')
      // Dispatch logout action
      api.dispatch(logout())
    }
  }

  // Log errors (ch·ªâ trong development)
  if (import.meta.env.NODE_ENV === 'development' && result.error) {
    console.error('‚ùå RTK Query error:', result.error)
  }
  if (result.error) {
    const err = result.error as FetchBaseQueryError
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const data = err.data as any
    // Chu·∫©n h√≥a v·ªÅ d·∫°ng th·ªëng nh·∫•t
    const normalizedError: ApiError = {
      status: typeof err.status === 'number' ? err.status : 500,
      message: data?.message || ('error' in err ? err.error : undefined) || 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.',
      errors: data?.errors || undefined
    }
    return { error: normalizedError }
  }

  return result
}

// T·∫°o baseApi
export const baseApi = createApi({
  reducerPath: 'api',
  baseQuery: baseQueryWithReauth,
  tagTypes: ['Course', 'User', 'Section', 'Lesson', 'Enrollment', 'Progress'],
  // C·∫•u h√¨nh caching
  keepUnusedDataFor: 300, // gi·ªØ cache trong 5 ph√∫t
  refetchOnMountOrArgChange: 30, // refetch n·∫øu ƒë√£ cache qu√° 30 gi√¢y
  refetchOnFocus: false, // kh√¥ng refetch khi focus l·∫°i tab
  refetchOnReconnect: true, // refetch khi k·∫øt n·ªëi l·∫°i internet
  endpoints: () => ({})
})
// import {
//   createApi,
//   fetchBaseQuery,
//   type BaseQueryFn,
//   type FetchArgs,
//   type FetchBaseQueryError
// } from '@reduxjs/toolkit/query/react'
// import { logout, setToken } from '../features/auth/authSlice'
// import type { RootState } from '../store'

// const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000'

// /** üîπ Ki·ªÉu l·ªói th·ªëng nh·∫•t trong to√†n d·ª± √°n */
// export interface ApiError {
//   status: number
//   message: string
//   /** l·ªói t·ª´ field validation (Laravel, NestJS, v.v...) */
//   errors?: Record<string, string[]>
// }

// /** üîπ Base query g·ªëc, c√≥ attach token */
// const rawBaseQuery = fetchBaseQuery({
//   baseUrl: API_URL,
//   credentials: 'include',
//   prepareHeaders: (headers, { getState }) => {
//     const token = (getState() as RootState).auth.accessToken || localStorage.getItem('accessToken')
//     if (token) headers.set('authorization', `Bearer ${token}`)
//     return headers
//   }
// })

// /** üîπ Base query c√≥ t·ª± refresh token + normalize error */
// export const baseQueryWithReauth: BaseQueryFn<string | FetchArgs, unknown, ApiError> = async (
//   args,
//   api,
//   extraOptions
// ) => {
//   // 1Ô∏è‚É£ G·ªçi request g·ªëc
//   let result = await rawBaseQuery(args, api, extraOptions)

//   // 2Ô∏è‚É£ N·∫øu b·ªã 401 ‚Üí th·ª≠ refresh token
//   if (result.error && 'status' in result.error && result.error.status === 401) {
//     if (import.meta.env.DEV) console.warn('üîÑ Access token h·∫øt h·∫°n, ƒëang refresh...')

//     const refreshResult = await rawBaseQuery({ url: '/auth/refresh', method: 'POST' }, api, extraOptions)

//     if (refreshResult.data) {
//       const { accessToken } = refreshResult.data as { accessToken: string }

//       // C·∫≠p nh·∫≠t token v√†o localStorage & Redux
//       localStorage.setItem('accessToken', accessToken)
//       api.dispatch(setToken(accessToken))

//       // üîÅ Retry request ban ƒë·∫ßu
//       result = await rawBaseQuery(args, api, extraOptions)
//     } else {
//       console.error('‚ùå Refresh token th·∫•t b·∫°i, ƒëang logout...')
//       localStorage.removeItem('accessToken')
//       api.dispatch(logout())
//     }
//   }

//   // 3Ô∏è‚É£ Chu·∫©n h√≥a l·ªói
//   if (result.error) {
//     const err = result.error as FetchBaseQueryError
//     let normalized: ApiError

//     if ('status' in err) {
//       const data = err.data as any
//       normalized = {
//         status: typeof err.status === 'number' ? err.status : 500,
//         message: data?.message || (typeof data === 'string' ? data : 'ƒê√£ c√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.'),
//         errors: data?.errors
//       }
//     } else {
//       normalized = {
//         status: 0,
//         message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß. Ki·ªÉm tra l·∫°i internet.'
//       }
//     }

//     if (import.meta.env.DEV) {
//       console.error('‚ùå RTK Query normalized error:', normalized)
//     }

//     return { error: normalized }
//   }

//   // ‚úÖ Th√†nh c√¥ng
//   return result
// }

// /** üîπ T·∫°o API root, d√πng cho to√†n app */
// export const baseApi = createApi({
//   reducerPath: 'api',
//   baseQuery: baseQueryWithReauth,
//   tagTypes: ['User', 'Course', 'Section', 'Lesson', 'Enrollment', 'Progress'],

//   // üß† Cache config ‚Äî c√¢n b·∫±ng hi·ªáu su·∫•t v√† UX
//   keepUnusedDataFor: 300, // 5 ph√∫t gi·ªØ cache
//   refetchOnReconnect: true, // t·ª± refetch khi m·∫•t m·∫°ng r·ªìi reconnect
//   refetchOnFocus: false, // tr√°nh refetch m·ªói khi focus l·∫°i tab
//   refetchOnMountOrArgChange: 30, // refetch n·∫øu cache c≈© h∆°n 30s

//   endpoints: () => ({})
// })
